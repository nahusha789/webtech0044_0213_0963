{"version":3,"sources":["img/PES.jpg","context/auth.js","PrivateRoute.js","components/Card.js","components/Logo.js","components/Form.js","components/Input.js","components/Button.js","pages/Login.js","pages/Signup.js","pages/Home.js","pages/Admin.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","AuthContext","createContext","PrivateRoute","Component","component","rest","isAuthenticated","useContext","render","props","to","Card","styled","div","Logo","img","Form","Input","input","Button","button","Login","src","logoImg","type","placeholder","Signup","Home","Admin","App","existingTokens","JSON","parse","localStorage","getItem","useState","authTokens","setAuthTokens","Provider","value","data","setItem","stringify","exact","path","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oFAAAA,EAAOC,QAAU,IAA0B,iC,2KCE9BC,EAAcC,0BCcZC,MAZf,YAA0D,IAAvBC,EAAsB,EAAjCC,UAAyBC,EAAQ,6BAC/CC,EDACC,qBAAWP,GCClB,OACI,kBAAC,IAAD,iBAAWK,EAAX,CAAiBG,OAAQ,SAACC,GAAD,OAAWH,EAChC,kBAACH,EAAcM,GAEf,kBAAC,IAAD,CAAUC,GAAG,gB,wRCRlB,IAAMC,EAAOC,IAAOC,IAAV,K,sHCAV,IAAMC,EAAOF,IAAOG,IAAV,K,8ICAV,IAAMC,EAAOJ,IAAOC,IAAV,K,8KCAV,IAAMI,EAAQL,IAAOM,MAAV,K,iUCAX,IAAMC,EAASP,IAAOQ,OAAV,KCqBJC,MAdf,WACI,OACI,kBAACV,EAAD,KACI,kBAACG,EAAD,CAAMQ,IAAKC,MACX,kBAACP,EAAD,KACI,kBAACC,EAAD,CAAOO,KAAK,QAAQC,YAAY,UAChC,kBAACR,EAAD,CAAOO,KAAK,WAAWC,YAAY,aACnC,kBAACN,EAAD,iBAEJ,kBAAC,IAAD,CAAMT,GAAG,WAAT,6BCMGgB,MAff,WACI,OACI,kBAACf,EAAD,KACI,kBAACG,EAAD,CAAMQ,IAAKC,MACX,kBAACP,EAAD,KACI,kBAACC,EAAD,CAAOO,KAAK,QAAQC,YAAY,UAChC,kBAACR,EAAD,CAAOO,KAAK,WAAWC,YAAY,aACnC,kBAACR,EAAD,CAAOO,KAAK,WAAWC,YAAY,qBACnC,kBAACN,EAAD,iBAEJ,kBAAC,IAAD,CAAMT,GAAG,UAAT,8BCbGiB,MAJf,SAAclB,GACV,OAAO,2CCGImB,MAJf,SAAenB,GACX,OAAO,4CCqCIoB,MA/Bf,SAAapB,GACX,IAAMqB,EAAiBC,KAAKC,MAAMC,aAAaC,QAAQ,WADrC,EAEkBC,mBAASL,GAF3B,mBAEXM,EAFW,KAECC,EAFD,KASlB,OACE,kBAACrC,EAAYsC,SAAb,CAAsBC,MAAO,CAAEH,aAAYC,cAN3B,SAACG,GACjBP,aAAaQ,QAAQ,SAAUV,KAAKW,UAAUF,IAC9CH,EAAcG,MAKZ,kBAAC,IAAD,KACE,6BACE,4BACE,4BACE,kBAAC,IAAD,CAAM9B,GAAG,KAAT,gBAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,UAAT,iBAGJ,kBAAC,IAAD,CAAOiC,OAAK,EAACC,KAAK,IAAIxC,UAAWuB,IACjC,kBAAC,IAAD,CAAOiB,KAAK,SAASxC,UAAWiB,IAChC,kBAAC,IAAD,CAAOuB,KAAK,UAAUxC,UAAWsB,IACjC,kBAAC,EAAD,CAAckB,KAAK,SAASxC,UAAWwB,QCrB7BiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAAS1C,OACP,kBAAC,IAAM2C,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5162f6df.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/PES.bb709d23.jpg\";","import { createContext, useContext } from \"react\";\n\nexport const AuthContext = createContext();\n\nexport function useAuth() {\n    return useContext(AuthContext);\n}","import React from \"react\";\nimport { Route, Redirect } from 'react-router-dom';\nimport { useAuth } from \"./context/auth\";\n\nfunction PrivateRoute({ component: Component, ...rest }) {\n    const isAuthenticated = useAuth();\n    return (\n        <Route {...rest} render={(props) => isAuthenticated ? (\n            <Component {...props} />\n        ) : (\n            <Redirect to='/login' />\n        )}\n        />\n    );\n}\n\nexport default PrivateRoute;","import styled from 'styled-components';\n\nexport const Card = styled.div`\n    box-sizing: border-box;\n    max-width: 410px;\n    margin: 0 auto;\n    padding: 0 2rem;\n    display: flex;\n    flex-direction: column;\n    align-items: ClientRect;\n    `;\n\nexport default Card;","import styled from 'styled-components';\n\nexport const Logo = styled.img`\n    width: 50%;\n    margin-bottom: 1rem;\n    `;\n\nexport default Logo;","import styled from 'styled-components';\n\nexport const Form = styled.div`\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    `;\n\nexport default Form;","import styled from 'styled-components';\n\nexport const Input = styled.input`\n    padding: 1rem;\n    border: 1px solid #999;\n    margin-bottom: 1rem;\n    font-size: 0.8rem;\n    `;\n\nexport default Input;","import styled from 'styled-components';\n\nexport const Button = styled.button`\n    background: linear-gradient(to bottom, #6371c7, #5563c1);\n    borser-color: #3f4eae;\n    border-radius: 3px;\n    padding: 1rem;\n    color: white;\n    font-weight: 700;\n    width: 100%;\n    margin-bottom: 1rem;\n    font-size: 0.8rem;\n    `;\n\nexport default Button;","import React from \"react\";\nimport { Link } from 'react-router-dom';\nimport logoImg from \"../img/PES.jpg\";\nimport { Card } from \"../components/Card\";\nimport { Logo } from \"../components/Logo\";\nimport { Form } from \"../components/Form\";\nimport { Input } from \"../components/Input\";\nimport { Button } from \"../components/Button\";\n\nfunction Login() {\n    return (\n        <Card>\n            <Logo src={logoImg} />\n            <Form>\n                <Input type=\"email\" placeholder=\"email\"/>\n                <Input type=\"password\" placeholder=\"password\" />\n                <Button>Sign In</Button>\n            </Form>\n            <Link to='/signup'> Don't have an account?</Link>\n        </Card>\n    );\n}\n\nexport default Login;","import React from \"react\";\nimport { Link } from 'react-router-dom';\nimport logoImg from \"../img/PES.jpg\";\nimport { Card } from \"../components/Card\";\nimport { Logo } from \"../components/Logo\";\nimport { Form } from \"../components/Form\";\nimport { Input } from \"../components/Input\";\nimport { Button } from \"../components/Button\";\n\nfunction Signup() {\n    return (\n        <Card>\n            <Logo src={logoImg} />\n            <Form>\n                <Input type=\"email\" placeholder=\"email\" />\n                <Input type=\"password\" placeholder=\"password\" />\n                <Input type=\"password\" placeholder=\"confirm password\" />\n                <Button>Sign Up</Button>\n            </Form>\n            <Link to=\"/login\">Already have an account?</Link>\n        </Card>\n    );\n}\n\nexport default Signup;","import React from \"react\";\n\nfunction Home(props) {\n    return <div>Home Page</div>;\n}\n\nexport default Home;","import React from \"react\";\n\nfunction Admin(props) {\n    return <div>Admin Page</div>;\n}\n\nexport default Admin;","import React, { useState } from 'react';\nimport { BrowserRouter as Router, Link, Route } from \"react-router-dom\";\nimport PrivateRoute from './PrivateRoute';\nimport Login from \"./pages/Login\";\nimport Signup from \"./pages/Signup\";\nimport Home from './pages/Home';\nimport Admin from './pages/Admin';\nimport { AuthContext } from \"./context/auth\";\n\nfunction App(props) {\n  const existingTokens = JSON.parse(localStorage.getItem(\"tokens\"));\n  const [authTokens, setAuthTokens] = useState(existingTokens);\n\n  const setTokens = (data) => {\n    localStorage.setItem(\"tokens\", JSON.stringify(data));\n    setAuthTokens(data);\n  }\n\n  return (\n    <AuthContext.Provider value={{ authTokens, setAuthTokens: setTokens }}>\n      <Router>\n        <div>\n          <ul>\n            <li>\n              <Link to=\"/\"> Home Page </Link>\n            </li>\n            <li>\n              <Link to=\"/admin\"> Admin Page</Link>\n            </li>\n          </ul>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/login\" component={Login} />\n          <Route path=\"/signup\" component={Signup} />\n          <PrivateRoute path=\"/admin\" component={Admin} />\n        </div>\n      </Router>\n    </AuthContext.Provider>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}